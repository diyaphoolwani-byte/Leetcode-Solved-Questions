class Solution {
    final static char[][] L={
        {},{},{'a','b','c'},{'d','e','f'},{'g','h','i'},{'j','k','l'},
        {'m','n','o'},{'p','q','r','s'},{'t','u','v'},{'w','x','y','z'}
    };
    public List<String> letterCombinations(String digits) {
        List<String> res= new ArrayList<>();
        int len=digits.length();
        if(len==0)
        {
            return res;
        }
        bfs(0,len,new StringBuilder(),digits,res);
        return res;
    }
    private static void bfs(int pos,int len,StringBuilder sb,String D, List<String> res)
    {
        if(pos==len)
        {
            res.add(sb.toString());
            return;
        }

        char letters[]=L[Character.getNumericValue(D.charAt(pos))];
        for(int i=0;i<letters.length;i++)
        {
            bfs(pos+1,len,new StringBuilder(sb).append(letters[i]),D,res);
        }
    }
}
