class Solution {
    public int largestRectangleArea(int[] heights) {

        int leftbo[]=new int[heights.length];
        int rigbo[]=new int[heights.length];
        Stack<Integer> s=new Stack<>();

        // leftboundary array
        for(int i=0;i<heights.length;i++)
        {
            while(!s.isEmpty() && heights[s.peek()]>=heights[i])
            {
                s.pop();
            }
            if(s.isEmpty())
            {
                leftbo[i]=-1;
            }else
            {
                leftbo[i]=s.peek();
            }
            s.push(i);
        }
        
        // empty stack
        s=new Stack<>();

        // rightboundary array
        for(int i=heights.length-1;i>=0;i--)
        {
            while(!s.isEmpty() && heights[s.peek()]>=heights[i])
            {
                s.pop();
            }
            if(s.isEmpty())
            {
                rigbo[i]=heights.length;
            }else
            {
                rigbo[i]=s.peek();
            }
            s.push(i);
        }

        int maxarea=Integer.MIN_VALUE;
        for(int i=0;i<heights.length;i++)
        {
            int width=rigbo[i]-leftbo[i]-1;
            int area=width*heights[i];
            maxarea=Math.max(area,maxarea);
        }
        return maxarea;
    }  
}
