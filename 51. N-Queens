class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> res = new ArrayList<List<String>>();
        char board[][] = new char[n][n];
        int row = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] = '.';
            }
        }
        queens(board, row, res);
        return res;
    }

    public void queens(char board[][], int row, List<List<String>> res) {
        if (row == board.length) {
            printarr(board, res);
            return;
        }
        for (int j = 0; j < board.length; j++) {
            if (isSafe(board, row, j)) {
                board[row][j] = 'Q';
                queens(board, row + 1, res);
                board[row][j] = '.';
            }
        }
    }

    public boolean isSafe(char board[][], int row, int col) {
        // vertically up
        for (int j = row - 1; j >= 0; j--) {
            if (board[j][col] == 'Q') {
                return false;
            }
        }

        // diagonally left
        for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == 'Q') {
                return false;
            }
        }

        // diagonally right
        for (int i = row - 1, j = col + 1; i >= 0 && j < board.length; i--, j++) {
            if (board[i][j] == 'Q') {
                return false;
            }
        }

        return true;
    }

    public void printarr(char board[][], List<List<String>> res) {
        List<String> child = new ArrayList<String>();
        for (int i = 0; i < board.length; i++) {
            String line = "";
            for (int j = 0; j < board.length; j++) {
                line += board[i][j];
            }
            child.add(line);
        }
        res.add(child);
    }
}
